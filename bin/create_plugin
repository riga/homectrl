#!/usr/bin/env node

// node modules
var fs   = require("fs"),
    path = require("path");

// external modules
var mu = require("mustache");

// local modules
var createCli = require("../lib/util.js").createCli;


var createPlugin = function(name, callback) {
  var dstDir = name;
  var srcDir = path.resolve(__dirname, "../plugins/_template");

  var readdir = function(dir) {
    return fs.readdirSync(dir).map(function(elem) {
      return path.join(dir, elem);
    });
  };

  var cut = function(elem) {
    return elem.substr(srcDir.length);
  };

  var filenameMapping = {
    name: name
  };
  var changeFilename = function(name) {
    Object.keys(filenameMapping).forEach(function(key) {
      var value = filenameMapping[key];
      var re = new RegExp("__" + key + "__", "g");
      name = name.replace(re, value);
    });
    return name;
  };

  var stack = readdir(srcDir);

  while (stack.length) {
    var elem = stack.shift();
    var stat = fs.statSync(elem);
    if (stat.isDirectory()) {
      var relPath = path.join(dstDir, cut(elem));
      if (!fs.existsSync(relPath)) fs.mkdirSync(relPath);

      stack = stack.concat(readdir(elem));
    } else if (stat.isFile()) {
      var basename = path.basename(elem);
      var dirname  = path.dirname(elem);

      // replace parts of the name
      basename = changeFilename(basename);

      var relPath = path.join(dstDir, cut(path.join(dirname, basename)));
      var content = fs.readFileSync(elem, { encoding: "utf8" });

      fs.writeFileSync(relPath, mu.render(content, { name: name }));
    }
  }

  callback(null);
};



// define the actual cli argumets
var args = [
  {
    name: "-n, --name [NAME]",
    desc: "the name of the module"
  }
];

// parse args
var cli = createCli(args, "./create_plugin", "0.0.1").parse(process.argv);

// name is required
if (!cli.name) {
  console.log("a name is required");
  process.exit(1);
}

// does the folder already exist?
if (fs.existsSync(cli.name)) {
  console.log("a folder with that name already exists");
  process.exit(1);
}
fs.mkdirSync(cli.name);

// create the plugin
createPlugin(cli.name, function(err) {
  if (err) throw err;
  console.log("created plugin", cli.name);
});
