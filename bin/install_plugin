#!/usr/bin/env node

// node modules
var fs   = require("fs"),
    path = require("path"),
    exec = require("child_process").exec;

// external modules
var temp   = require("temp"),
    wrench = require("wrench");

// local modules
var types     = require("../lib/util.js").types,
    createCli = require("../lib/util.js").createCli;


var installLocalModule = function(localPath, callback) {
  console.log("installing plugin from local path '%s'", localPath);

  var tmpDir = path.join(temp.mkdirSync("homectrlplugin"), "plugin");

  wrench.copyDirRecursive(localPath, tmpDir, function(err) {
    if (err) return callback(err);

    var packageFile = path.join(tmpDir, "package.json");
    if (!fs.existsSync(packageFile)) {
      callback(null, tmpDir);
    } else {
      exec("npm install", { cwd: tmpDir }, function(err) {
        if (err) return callback(err);
        callback(null, tmpDir);
      });
    }
  });
};

var installRemoteModule = function(remoteName, callback) {
  console.log("installing remote plugin from npm module '%s'", remoteName);

  var tmpDir = temp.mkdirSync("homectrlplugin");

  exec("npm install " + remoteName, { cwd: tmpDir }, function(err) {
    if (err) return callback(err);

    tmpDir = path.join(tmpDir, "node_modules", remoteName);
    callback(null, tmpDir);
  });
};


// define the actual cli argumets
var args = [
  {
    name: "-l, --local-path [PATH]",
    desc: "the path to a local module to be installed as a plugin",
    type: types.userPath
  }, {
    name: "-r, --remote-name [NAME]",
    desc: "the name of the npm module to be installed as a plugin"
  }, {
    name: "-n, --name [NAME]",
    desc: "an alternative name for the plugin"
  }
];

// parse args
var cli = createCli(args, "./install_plugin", "0.0.1").parse(process.argv);

// either a local path or a remote name must be set
if (!cli.localPath && !cli.remoteName) {
  console.log("either a local path or a remote name must be set");
  process.exit(1);
}

// both installation types have a common callback
var commonCallback = function(err, tmpDir) {
  if (err) throw err;

  // determine the destination
  var name = cli.name;
  if (!cli.name) {
    name = cli.localPath ? path.basename(cli.localPath) : cli.remoteName;
  }
  var dstDir  = path.resolve(__dirname, "..", "plugins", name);

  fs.rename(tmpDir, dstDir, function(err) {
    if (err) throw err;
    console.log("installed plugin '%s'", dstDir);
  });
};

// local path is preferred over remote name
if (cli.localPath) {
  installLocalModule(cli.localPath, commonCallback);
} else {
  installRemoteModule(cli.remoteName, commonCallback);
}
